package com.rb.alwaysontheroad.gateway.config;

import brave.Tracer;
import com.rb.alwaysontheroad.gateway.config.decorator.BodyCaptureExchange;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

import java.util.Optional;

/**
 * Intercept 'traceId' generated by Spring Cloud Sleuth and pass it back to the client.
 */
@Slf4j
@Configuration
public class FilterConfig {
    private static final String TRACE_ID_HEADER = "traceId";
    private static final String DEFAULT_TRACE_ID = "no-trace-id";
    private static final String EMPTY = "no content";

    /**
     * Response adder Spring Cloud Sleuth's 'requestId' adder filer
     */
    @Bean
    public GlobalFilter requestIdAdderFilter(final Tracer tracer) {
        return (exchange, chain) -> chain.filter(exchange)
                .then(Mono.fromRunnable(() -> {
                    final String traceId = Optional.ofNullable(tracer.currentSpan())
                            .map(s -> s.context().traceIdString())
                            .orElse(DEFAULT_TRACE_ID);
                    exchange.getResponse().getHeaders().add(TRACE_ID_HEADER, traceId);
                }));
    }

    /**
     * Request/response body logger filter
     */
    @Bean
    public WebFilter requestResponseLoggerFilter() {
        return (ServerWebExchange serverWebExchange, WebFilterChain webFilterChain) -> {
            BodyCaptureExchange bodyCaptureExchange = new BodyCaptureExchange(serverWebExchange);

            return webFilterChain.filter(bodyCaptureExchange).doOnSuccess((se) -> {
                String requestBody = bodyCaptureExchange.getRequest().getFullBody();
                String responseBody = bodyCaptureExchange.getResponse().getFullBody();
                log.debug("Request body: '{}'", requestBody != null ? requestBody : EMPTY);
                log.debug("Response body: '{}'", responseBody != null ? requestBody : EMPTY);
            });
        };
    }
}
