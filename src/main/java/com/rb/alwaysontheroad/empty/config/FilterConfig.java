package com.rb.alwaysontheroad.empty.config;

import brave.Tracer;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import reactor.core.publisher.Mono;

import java.util.Optional;

/**
 * Intercept 'traceId' generated by Spring Cloud Sleuth and pass it back to the client.
 */
@Slf4j
@Configuration
public class FilterConfig {
    private static final String TRACE_ID_HEADER = "traceId";
    private static final String DEFAULT_TRACE_ID = "no-trace-id";

    /**
     * Response adder Spring Cloud Sleuth's 'requestId' adder filer
     */
    @Bean
    public GlobalFilter requestIdAdderFilter(final Tracer tracer) {
        return (exchange, chain) -> chain.filter(exchange)
                .then(Mono.fromRunnable(() -> {
                    final String traceId = Optional.ofNullable(tracer.currentSpan())
                            .map(s -> s.context().traceIdString())
                            .orElse(DEFAULT_TRACE_ID);
                    exchange.getResponse().getHeaders().add(TRACE_ID_HEADER, traceId);
                }));
    }
}
